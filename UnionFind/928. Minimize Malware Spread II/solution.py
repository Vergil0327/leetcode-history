class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial)==1: return initial[0]

        n = len(graph)

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            px, py = find(x), find(y)
            if px == py: return
            if rank[px] <= rank[py]:
                parent[py] = px
                rank[px] += rank[py]
            else:
                parent[px] = py
                rank[py] += rank[px]

        res = inf
        idx = -1
        for removed in initial:
            parent = list(range(n))
            rank = [1] * n

            for i in range(n):
                if i == removed: continue
                for j in range(n):
                    if i == j: continue
                    if j == removed: continue
                    if graph[i][j]:
                        union(i, j)

            seen = set()
            infected = 0
            for mal in initial:
                if mal == removed: continue
                p = find(mal)
                if p not in seen:
                    seen.add(p)
                    infected += rank[p]
            
            if infected < res:
                res = infected
                idx = removed
            elif infected == res:
                idx = min(idx, removed)
        return idx

# optimized
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial)==1: return initial[0]

        n = len(graph)

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            px, py = find(x), find(y)
            if px == py: return
            if rank[px] <= rank[py]:
                parent[py] = px
                rank[px] += rank[py]
            else:
                parent[px] = py
                rank[py] += rank[px]

        parent = list(range(n))
        rank = [1] * n

        normal = set(range(n)) - set(initial)
        for i in normal:
            for j in normal:
                if i == j: continue
                if graph[i][j]:
                    union(i, j)

        infectedGroups = defaultdict(set)
        infectedBy = defaultdict(int)
        for mal in initial:
            for node in normal:
                if graph[mal][node]:
                    infectedGroups[mal].add(find(node))

            for group in infectedGroups[mal]:
                infectedBy[group] += 1

        mx = -1
        idx = -1
        for mal, infected in infectedGroups.items():
            saved = 0
            for node in infected:
                if infectedBy[node] == 1:
                    saved += rank[node]

            if saved > mx:
                mx = saved
                idx = mal
            elif saved == mx:
                idx = min(idx, mal)
        return idx